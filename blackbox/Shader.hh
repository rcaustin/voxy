#ifndef SHADER_HH
#define SHADER_HH

////////////////////////////////////////////////////////////////////////////////////////////////////
// External Headers
////////////////////////////////////////////////////////////////////////////////////////////////////

#include <GL/glew.h>

////////////////////////////////////////////////////////////////////////////////////////////////////
// Standard Headers
////////////////////////////////////////////////////////////////////////////////////////////////////

#include <string>


////////////////////////////////////////////////////////////////////////////////////////////////////
// Shader Interface
////////////////////////////////////////////////////////////////////////////////////////////////////

class Shader {

public:
                         Shader();

  void                   LoadFromFile(const std::string& p_vertexSource,
                                      const std::string& p_fragmentSource);
  void                   LinkProgram();
  void                   AddAttribute(const std::string& p_attributeName);

  void                   Enable();
  void                   Disable();

  const GLint            GetUniformLocation(const std::string& p_uniformName) const;

private:
  GLuint                 m_programID;
  GLuint                 m_vertexShaderID;
  GLuint                 m_fragmentShaderID;
  GLint                  m_attributeCount;

  void                   CompileShader(const std::string& p_path, const GLuint p_shaderID) const;
};

////////////////////////////////////////////////////////////////////////////////////////////////////

#endif  // SHADER
